
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module CSCE611_lab_comet(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7
);



//=======================================================
//  logic declarations
//=======================================================

	/* 24 bit clock divider, converts 50MHz clock signal to 2.98Hz */
	logic [23:0] clkdiv;
	logic ledclk;
	assign ledclk = clkdiv[23];

	/* driver for LEDs */
	logic [25:0] leds;
	assign LEDR = leds[25:8];
	assign LEDG = leds[7:0];

	/* LED state logicister, 0 means going left, 1 means going right */
	logic ledstate;

//=======================================================
//  Structural coding
//=======================================================

	initial begin
		clkdiv <= 26'h0;
		/* start at the far right, LEDG0 */
		leds <= 26'b1;
		/* start out going to the left */
		ledstate <= 1'b0;
	end

	always_ff @(posedge CLOCK_50) begin
		/* drive the clock divider, every 2^26 cycles of CLOCK_50, the
		* top bit will roll over and give us a clock edge for clkdiv
		* */
		clkdiv <= clkdiv + 1;
	end

	always_ff @(posedge ledclk) begin
		/* going left and we are at the far left, time to turn around */
		if ( (ledstate == 0) && (leds == 26'b10000000000000000000000000) ) begin
			ledstate <= 1;
			leds <= leds >> 1;

		/* going left and not at the far left, keep going */
		end else if (ledstate == 0) begin
			ledstate <= 0;
			leds <= leds << 1;

		/* going right and we are at the far right, turn around */
		end else if ( (ledstate == 1) && (leds == 26'b1) ) begin
			ledstate <= 0;
			leds <= leds << 1;

		/* going right, and we aren't at the far right */
		end else begin
			leds <= leds >> 1;
		end
	end
	logic [7:0] num;
	always_comb
	case (leds)
		26'h0000001: num = 8'h01;
		26'h0000002: num = 8'h02;
		26'h0000004: num = 8'h03;
		26'h0000008: num = 8'h04;
		26'h0000010: num = 8'h05;
		26'h0000020: num = 8'h06;
		26'h0000040: num = 8'h07;
		26'h0000080: num = 8'h08;
		26'h0000100: num = 8'h09;
		26'h0000200: num = 8'h0A;
		26'h0000400: num = 8'h0B;
		26'h0000800: num = 8'h0C;
		26'h0001000: num = 8'h0D;
		26'h0002000: num = 8'h0E;
		26'h0004000: num = 8'h0F;
		26'h0008000: num = 8'h10;
		26'h0010000: num = 8'h11;
		26'h0020000: num = 8'h12;
		26'h0040000: num = 8'h13;
		26'h0080000: num = 8'h14;
		26'h0100000: num = 8'h15;
		26'h0200000: num = 8'h16;
		26'h0400000: num = 8'h17;
		26'h0800000: num = 8'h18;
		26'h1000000: num = 8'h19;
		26'h2000000: num = 8'h1A;
		default: num = 8'hFF;
	endcase
	hexdriver hex1(.val(num[3:0]), .HEX(HEX0));
	hexdriver hex2(.val(num[7:4]), .HEX(HEX1));
	hexdriver hex3(.val(num[3:0]), .HEX(HEX2));
	hexdriver hex4(.val(num[7:4]), .HEX(HEX3));
	hexdriver hex5(.val(num[3:0]), .HEX(HEX4));
	hexdriver hex6(.val(num[7:4]), .HEX(HEX5));
	hexdriver hex7(.val(num[3:0]), .HEX(HEX6));
	hexdriver hex8(.val(num[7:4]), .HEX(HEX7));
endmodule
